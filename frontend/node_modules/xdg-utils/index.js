
var os= require("os");
var cp= require("child_process") ;
var bindir= __dirname + "/bin/";
var tmpdir= os.tmpdir();
var uniqid= require("uniqid");
var fs= require("fs");
var appPath= process.env.HOME+"/.local/share/applications/";
var globalAppPath= "/usr/share/applications/";
var mimelist= appPath + "mimeapps.list"
var path= require("path");
if(!fs.existsSync(appPath)){
	fs.mkdirSync(appPath);
}

if(!fs.existsSync(mimelist)){
	fs.closeSync(fs.openSync(mimelist, 'wx'));
}

var exists= function(file){
	if(!exists.os){
		os=require("os");
		path=require("path");
		exists.os=os.platform();
		exists.path=path;
		exists.win=exists.os=="win32";
	}

	var path=process.env.PATH;
	path=path.split(exists.win ? ";" : ":");


	for(var i=0;i<path.length;i++){
		var p=path[i];
		var pe=exists.path.join(p,file)
		if(fs.existsSync(pe)){
			return true;
		}
	}
	return false;
}

var getName= getBin= function(name){
	if(exists(name)){
		return name;
	}
	return bindir+name;
}

var xdgutilsClass= function(){

}
xdgutils= xdgutilsClass.prototype;
var xdg={};
xdg.index=0;
xdg.desktopEntry= {
	"version": "Version",
	"type": {
		name:"Type",
		"default":"Application"
	},
	"name":"Name",
	"comment": "Comment",
	"tryexec":"TryExec",
	"exec": "Exec",
	"icon": "Icon",
	"mimetype": "MimeType",
	"categories": "Categories"
}


xdg.desktopAction={
	"name":"Name",
	"comment": "Comment",
	"tryexec":"TryExec",
	"exec": "Exec",
	"icon": "Icon"
}





xdg.mimeXML= [
	'<?xml version="1.0" encoding="UTF-8"?>',
	'<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">',
	'	</mime-type>',
	'</mime-info>'
]


xdgutils.getPath= getBin;

/*
function(exe){
	var cmd= bindir + exe;
	if(fs.existsSync(cmd)){
		return cmd;
	}
}
*/

xdgutils.getMimeType= function(file, callback){
	var cmd= getBin("xdg-mime") + " query filetype \"" + file + "\"";

	cp.exec(cmd, function(err, stdout, stderr){
		var err= err||stderr.toString();
		if(err){
			return callback(err);
		}

		// Todo ok ...
		return callback(null, stdout.toString());
	});
}


xdgutils.getApplicationForMimeType= function(type, callback){
	var cmd= getName("xdg-mime") + " query default \"" + type + "\"";
	cp.exec(cmd, function(err, stdout, stderr){
		var err= stderr.toString();
		if(err){
			return callback(err);
		}

		// Todo ok ...
		return callback(null, stdout.toString());
	});
}


xdgutils.setApplicationForMimeType= function(args, callback){

	var app= args.app;
	var type= args.type;

	var cmd= getName("xdg-mime") + " default \"" + app + "\" \"" + type + "\"";
	cp.exec(cmd, function(err, stdout, stderr){
		var err= stderr.toString();
		if(err){
			return callback(err);
		}

		// Todo ok ...

		return callback(null, stdout.toString());
	});


}

xdgutils.registerMimeType= function(args, callback){
	var str=[];
	str.push(xdg.mimeXML[0]);
	str.push(xdg.mimeXML[1]);


	var continuar= function(){
		str.push("	<mime-type type=\"" + htmlspecialchars(args.name) + "\" >")
		//  Cuerpo ...
		if(args.comment){
			str.push("		<comment>" + htmlspecialchars(args.comment) + "</comment>");
		}

		if(args.glob){
			if(typeof args.glob=="string"){
				args.glob=[args.glob];
			}

			for(var i=0;i<args.glob.length;i++){
				var pattern= args.glob[i];
				str.push("		<glob pattern=\"" + htmlspecialchars(args.comment) + "\"/>");
			}
		}

		str.push(xdg.mimeXML[2]);
		str.push(xdg.mimeXML[3]);
		str= str.join("\n");


		var file= tmpdir + "/" + uniqid() + ".xml";
		var cmd= getName("xdg-mime");
		var er= function(e, data){
			try{
				fs.unlinkSync(file);
			}
			catch(ex){
			}

			callback(e, data);
		}

		try{
			fs.writeFileSync(file, str);

			// Ejecutar el proceso ...
			cp.exec(cmd + ' install "'+ file + '"', function(err, stdout, stderr){
				var err= stderr.toString();
				if(err){
					return er(err);
				}

				// Todo ok ...
				return er();
			});

		}
		catch(e){
			er(e);
		}

	}
}



xdgutils.registerIcon= function(args, callback){
	var img= typeof args=="string" ? args : args.icon;

	var ext2=img.split(".");
	if(ext2.length==1){
		//  No tiene extensión o nombre
		return callback(new Error("El ícono no tiene nombre o extensión."));
	}

	var vendor= args.vendor;

	var ext= ext2[ext2.length-1];
	ext2.pop();
	var name= args.name; // Nombre sin extensión ..
	if(!name){
		var iconname= path.basename(img);
		iconname= iconname.split(".");
		iconname.pop();
		name= iconname.join(".");
	}

	//console.log(name);



	var command= [getName("xdg-icon-resource")];
	command.push("install");
	if(ext=="svg"){
		if(!vendor){
			command.push("--novendor");
		}
		command.push("\"" + img +"\"");
		command.push(name);
	}

	else{
		if(!vendor){
			command.push("--novendor");
		}
		command.push("--size");
		command.push(args.size || "48");
		command.push("\"" + img +"\"");
		command.push(name);
	}

	var cmd= command.join(" ");


	// Ejecutar el proceso ...
	cp.exec(cmd, function(err, stdout, stderr){
		var err= stderr.toString();
		if(err){
			return callback(err);
		}




		// Todo ok ...
		return callback();
	});

}


xdgutils.registerToDesktop = function(args2, callback){
	var args={}
	for(var id in args2){
		var id2= id.toLowerCase();
		args[id2]= args2[id];
	}

	if(args.icon.register){
		this.registerIcon(args.icon, function(err){
			if(err){
				return callback(err);
			}

			var iconname= args.icon.name;

			if(!iconname){
				iconname= path.basename(args.icon.icon);
				iconname= iconname.split(".");
				iconname.pop();
				args.icon= iconname.join(".");
			}
			return xdgutils._registerToDesktop(args, false, callback);
		});
	}
	else{
		return xdgutils._registerToDesktop(args, false, callback);
	}
}


xdgutils.registerApplication = function(args2, callback){
	var args={}
	for(var id in args2){
		var id2= id.toLowerCase();
		args[id2]= args2[id];
	}

	if(args.icon.register){
		this.registerIcon(args.icon, function(err){
			if(err){
				return callback(err);
			}

			var iconname= args.icon.name;

			if(!iconname){
				iconname=path.basename(args.icon.icon);
				iconname= iconname.split(".");
				iconname.pop();
				args.icon= iconname.join(".");
			}
			return xdgutils._registerToDesktop(args, true, callback);
		});
	}
	else{
		return xdgutils._registerToDesktop(args, true, callback);
	}
}


xdgutils.getDesktopDir= function(){
	var dirs=process.env.HOME+"/.config/user-dirs.dirs";
	if(!fs.existsSync(dirs)){
		return null;
	}

	var j,cont= fs.readFileSync(dirs,'utf8');
	cont=cont.split("\n");
	for(var i=0;i<cont.length;i++){
		var c=cont[i];
		if(c.substring(0,1)!="#"){
			j=c.split("=");
			if(j[0]=="XDG_DESKTOP_DIR"){
				var str=JSON.parse(j[1]);
				str=str.replace("$HOME",process.env.HOME);
				return str;
			}
		}
	}

	return null;
}


xdgutils._registerToDesktop = function(args2, menu, callback){

	var str=[];
	str.push("[Desktop Entry]");
	var name= args2.id || uniqid();

	var s= function(args2, entries){
		var args={}
		for(var id in args2){
			var id2= id.toLowerCase();
			args[id2]= args2[id];
		}
		for(var id in entries){
			var val= entries[id];
			var name= (typeof val=="string") ? val : val.name;
			var value= args[id] || val.default;
			if(value){
				if(value instanceof Array){
					value= value.join(";") + ";";
				}
				str.push(name + "=" + value);
			}
		}
	}

	s(args2, xdg.desktopEntry);

	if(args2.actions){
		for(var id in args.actions){

			str.push("");
			str.push("");
			str.push("[Desktop Action " + id + "]");
			var action= args.actions[id];
			s(action, xdg.desktopAction);

		}
	}

	str= str.join("\n");

	var file= tmpdir + "/" + name + ".desktop";
	var cmd= getName( "xdg-desktop-icon");
	if(menu){
		cmd= getName("xdg-desktop-menu");
	}
	var er= function(e, data){
		try{
			fs.unlinkSync(file);
		}
		catch(ex){
		}

		callback(e, data);
	}

	try{
		fs.writeFileSync(file, str);

		if(menu){
			//cmd=cmd + ' install --novendor "' + appPath + name + ".desktop\" \"" + file + '"';
			cmd=cmd + ' install --novendor "'+ file + '"';
		}

		else{
			cmd=cmd + ' install --novendor "'+ file + '"';
		}


		//cp.exec("chmod 755 '" + file + "'",function(err,stdout,stderr){



		// Ejecutar el proceso ...
		cp.exec(cmd, function(err, stdout, stderr){
			var err= stderr.toString();
			if(err){
				return er(err);
			}

			var desktopdir;
			try{
				desktopdir=xdgutils.getDesktopDir();
			}
			catch(e){
				return er(e);
			}
			//vw.log(desktopdir);

			if(desktopdir){
				// EN UBUNTU CUANDO SE EJECUTA CON SUDO EL ARCHIVO QUEDA SIN PERMISOS PARA USUARIO NORMAL ...
				var dfile= desktopdir + "/" + name + ".desktop";
				var p= function(){
					if(!fs.existsSync(dfile)){
						if(!p.p){
							p.p=true;
							return er();
						}
						setTimeout(p,100);
						return;
					}
					cp.exec("chmod 755 '" + dfile + "'",function(err,stdout,stderr){
						var err= err||stderr.toString();
						if(err){
							//return er(err);
						}
						//return er();
					})
				}
				p();
				//er();
			}
			else{
				// Todo ok ...
				return er();
			}
		});



	}
	catch(e){
		er(e);
	}

}

module.exports= new xdgutilsClass();
